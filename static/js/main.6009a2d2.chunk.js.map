{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/robots.js","Components/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","card","name","email","id","className","alt","src","CardList","robots","map","user","i","Card","key","SearchBox","searchChange","type","placeholder","onChange","userName","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","filteredRobot","this","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAZH,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAEvB,OACI,yBAAKC,UAAU,sCACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCSLK,EAdE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAOC,GACnB,OACA,kBAACC,EAAD,CAAMC,IAAKF,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCDpEY,EATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEhB,OACI,yBAAKX,UAAU,0CACf,2BAAOY,KAAO,SAASC,YAAc,gBAAgBC,SAAYH,MCN5DP,EAAS,CAClB,CACIL,GAAG,EACHF,KAAM,eACNkB,SAAS,SACTjB,MAAM,oBAEV,CACIC,GAAG,EACHF,KAAM,YACNkB,SAAS,QACTjB,MAAM,mBAEV,CACIC,GAAG,EACHF,KAAM,cACNkB,SAAS,SACTjB,MAAM,oBAEV,CACIC,GAAG,EACHF,KAAM,YACNkB,SAAS,OACTjB,MAAM,kBAEV,CACIC,GAAG,EACHF,KAAM,YACNkB,SAAS,MACTjB,MAAM,iBAEV,CACIC,GAAG,EACHF,KAAM,WACNkB,SAAS,MACTjB,MAAM,iBAEV,CACIC,GAAG,EACHF,KAAM,YACNkB,SAAS,UACTjB,MAAM,kBAEV,CACIC,GAAG,EACHF,KAAM,YACNkB,SAAS,QACTjB,MAAM,mBAEV,CACIC,GAAG,EACHF,KAAM,aACNkB,SAAS,MACTjB,MAAM,iBAEV,CACIC,GAAG,GACHF,KAAM,aACNkB,SAAS,OACTjB,MAAM,mBC/CCkB,EAVA,SAACC,GACZ,OAAQ,yBAAKC,MAAO,CAChBC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,UAETJ,EAAMK,WC4BEC,E,kDA5BX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVC,YAAcF,EAAMG,OAAOC,SAR/B,EAAKC,MAAQ,CACT1B,OAASA,EACTuB,YAAY,IAJP,E,qDAaJ,IAAD,OACEI,EAAgBC,KAAKF,MAAM1B,OAAO6B,QAAO,SAAA7B,GAC3C,OAAOA,EAAOP,KAAKqC,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAEzE,OACI,yBAAKlC,UAAY,MACd,6CACA,kBAAC,EAAD,CAAWW,aAAgBqB,KAAKR,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAS2B,U,GAxBbK,IAAMC,WCExBC,IAASC,OAAO,6BAChB,kBAAC,EAAD,OAEEC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6009a2d2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst card =({name, email, id})=> {\r\n    \r\n    return (\r\n        <div className=\"bg-light-blue dib br3 pa3 ma2 grow\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?500x200`}/>\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default card;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n    return(\r\n        <div>\r\n            {\r\n            robots.map((user , i) => {\r\n            return  (\r\n            <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n            );\r\n        })\r\n    }\r\n         </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\r\n    return(\r\n        <div className=\"pa3 b---yellow bg-light-yellow dib ma2\">\r\n        <input type = \"serach\" placeholder = \"Serach Robots\" onChange = {searchChange}/>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default SearchBox;","export const robots = [\r\n    {\r\n        id:1,\r\n        name: \"Learne Greme\",\r\n        userName:\"Learne\",\r\n        email:\"Learne@gmail.com\"\r\n    },\r\n    {\r\n        id:2,\r\n        name: \"Sally Joe\",\r\n        userName:\"sally\",\r\n        email:\"sally@gmail.com\"\r\n    },\r\n    {\r\n        id:3,\r\n        name: \"Andrew Hall\",\r\n        userName:\"andrew\",\r\n        email:\"andrew@gmail.com\"\r\n    },\r\n    {\r\n        id:4,\r\n        name: \"Will Mark\",\r\n        userName:\"Will\",\r\n        email:\"will@gmail.com\"\r\n    },\r\n    {\r\n        id:5,\r\n        name: \"Amy Smith\",\r\n        userName:\"Amy\",\r\n        email:\"amy@gmail.com\"\r\n    },\r\n    {\r\n        id:6,\r\n        name: \"Riz tobo\",\r\n        userName:\"Riz\",\r\n        email:\"riz@gmail.com\"\r\n    },\r\n    {\r\n        id:7,\r\n        name: \"Rose mary\",\r\n        userName:\"RRoseiz\",\r\n        email:\"Rose@gmail.com\"\r\n    },\r\n    {\r\n        id:8,\r\n        name: \"Allen wik\",\r\n        userName:\"Allen\",\r\n        email:\"Allen@gmail.com\"\r\n    },\r\n    {\r\n        id:9,\r\n        name: \"Tom kimber\",\r\n        userName:\"Tom\",\r\n        email:\"Tom@gmail.com\"\r\n    },\r\n    {\r\n        id:10,\r\n        name: \"Andy murry\",\r\n        userName:\"Andy\",\r\n        email:\"Andy@gmail.com\"\r\n    }\r\n]","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (<div style={{\r\n        overflow: 'scroll',\r\n        border: '1px solid black',\r\n        height: '800px'\r\n      }}>\r\n      {props.children}\r\n    </div>);\r\n  }\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport {robots} from '../Components/robots';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : robots,\r\n            searchField:\"\"\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({\r\n            searchField : event.target.value});\r\n    }\r\n       \r\n    render(){\r\n        const filteredRobot = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        })\r\n    return(\r\n        <div className = \"tc\">\r\n           <h1> Robo Friends</h1>\r\n           <SearchBox searchChange = {this.onSearchChange}/>\r\n           <Scroll>\r\n            <CardList robots ={filteredRobot}/>\r\n          </Scroll>\r\n        </div>\r\n    );\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n\nReactDOM.render(<div>\n<App/>\n</div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}